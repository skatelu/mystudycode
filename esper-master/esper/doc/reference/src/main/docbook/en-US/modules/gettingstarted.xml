<chapter xml:id="gettingstarted" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>Getting Started</title>

    <sect1 xml:id="gettingstarted_introcep" revision="1">
        <title>Introduction to Complex Event Processing</title>
        
        <para>
			The Esper engine has been developed to address the requirements of applications that analyze and react to events. Some typical examples of applications are:
        </para>
        
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					Business process management and automation (process monitoring, BAM, reporting exceptions) 
				</para>
			</listitem>
			<listitem>
				<para>
					Finance (algorithmic trading, fraud detection, risk management)
				</para>
			</listitem>
			<listitem>
				<para>
					Network and application monitoring (intrusion detection, SLA monitoring)
				</para>
			</listitem>
			<listitem>
				<para>
					Sensor network applications (RFID reading, scheduling and control of fabrication lines, air traffic) 
				</para>
			</listitem>
		</itemizedlist>

        <para>
			What these applications have in common is the requirement to process events (or messages) in real-time or near real-time. This is sometimes referred to as complex event processing (CEP) and event series analysis. Key considerations for these types of applications are throughput, latency and the complexity of the logic required.
        </para>

		<itemizedlist spacing="compact">
			<listitem>
				<para>
					High throughput - applications that process large volumes of messages (between 1,000 to 100k messages per second)
				</para>
			</listitem>
			<listitem>
				<para>
					Low latency - applications that react in real-time to conditions that occur (from a few milliseconds to a few seconds)
				</para>
			</listitem>
			<listitem>
				<para>
					Complex computations - applications that detect patterns among events (event correlation), filter events, aggregate time or length windows of events, join event series, trigger based on absence of events etc.
				</para>
			</listitem>
		</itemizedlist>

        <para>
			The Esper engine was designed to make it easier to build and extend CEP applications. 
        </para>
        
        <para>
			More information on CEP can be found at <link xlink:href="http://www.espertech.com/esper/esper-faq#whatiscep">FAQ</link>.
        </para>
    </sect1>
    
	<sect1 xml:id="gettingstarted_steps" revision="1">
        <title>Steps</title>

		<sect2 xml:id="gettingstarted_steps_1" revision="1">
			<title>Step One: Setting up Classpath</title>
			
			<para>
				Please add Esper and dependent jar files to the classpath:
			</para>
			
			<itemizedlist>
				<ns:listitem>
					<para>Esper core jar file <literal>esper-</literal><emphasis>version</emphasis><literal>.jar</literal></para>
				</ns:listitem>
				<ns:listitem>
					<para>ANTLR parser jar file <literal>antlr-runtime-4.7.jar</literal></para>
				</ns:listitem>
				<ns:listitem>
					<para>CGLIB code generator jar file <literal>cglib-nodep-3.2.5.jar</literal></para>
				</ns:listitem>
				<ns:listitem>
					<para>SLF4J logging library <literal>slf4j-api-1.7.25.jar</literal></para>
				</ns:listitem>
				<ns:listitem>
					<para>Janino Java compiler (unless disabled via configuration, see below) <literal>janino-3.0.7.jar</literal> and <literal>commons-compiler-3.0.7.jar</literal></para>
				</ns:listitem>
			</itemizedlist>
			
			<para>
				Optionally, for logging using Log4j, please add <literal>slf4j-log4j12-1.7.25.jar</literal> and <literal>log4j-1.2.17.jar</literal> to the classpath.
			</para>

			<para>
				Optionally, for using Apache Avro with Esper, please add <literal>esper-avro-</literal><emphasis>version</emphasis><literal>.jar</literal> to the classpath.
			</para>

			<para>
				The use of the Janino compiler can be disabled by turning off code generation. Please see <xref linkend="bytecodegen"/> and <xref linkend="config-engine-bytecodegen"/>.
			</para>
		</sect2>    

		<sect2 xml:id="gettingstarted_steps_2" revision="1">
			<title>Step Two: Obtain Engine Instance</title>
			
			<para>
				Your application can obtain an engine instance by calling the <literal>getDefaultPovider</literal> static method of the <literal>EPServiceProviderManager</literal> class:
			</para>
			<programlisting>EPServiceProvider engine = EPServiceProviderManager.getDefaultProvider();</programlisting>

			<para>
				This example does not provide a <literal>Configuration</literal> configuration object and thus the engine instance returned is configured with defaults. The default engine URI, which is simply the name assigned to the engine, is <literal>"default"</literal>.
			</para>
			
			<para>
				More information about <literal>EPServiceProviderManager</literal> can be found at <xref linkend="api-engine-instances"/> and the JavaDoc.
			</para>

			<para>
				More information about engine configuration can be found at <xref linkend="configuration"/> and the JavaDoc. 
			</para>
		</sect2>    

		<sect2 xml:id="gettingstarted_steps_3" revision="1">
			<title>Step Three: Provide Information on Input Events</title>
			
			<para>
				Your application can register an event type to instruct the engine what the input events look like. When creating EPL statements the engine checks the available event type information
				to determine that the statement is valid.
			</para>
			
			<para>
				This example assumes that there is a Java class <literal>PersonEvent</literal> and each instance of the <literal>PersonEvent</literal> class is an event. Note that it is not necessary to create classes for each event type, as explained below. Here is the class:
			</para>
			<programlisting>package com.mycompany.myapp;

public class PersonEvent {
  private String name;
  private int age;

  public PersonEvent(String name, int age) {
    this.name = name;
    this.age = age;
  }

  public String getName() {
    return name;
  }

  public int getAge() {
    return age;
  }
}</programlisting>

			<para>
				Your application can call the <literal>addEventType</literal> method  that is part of the runtime configuration interface to tell the engine about the <literal>PersonEvent</literal> class:
			</para>
			<programlisting>engine.getEPAdministrator().getConfiguration().addEventType(PersonEvent.class);</programlisting>
			
			<para>
				Upon calling the <literal>addEventType</literal> method and passing the <literal>PersonEvent</literal> class the engine inspects the class using reflection and determines the event properties.
				Because the class has two JavaBean-standard getter-methods the engine determines that a <literal>PersonEvent</literal> has two properties: the <literal>name</literal> property of type <literal>string</literal> and the <literal>age</literal> property of type <literal>int</literal>.
			</para>
			
			<para>
				Now that the <literal>PersonEvent</literal> event type is known to the engine, your application can create EPL statements that have <literal>PersonEvent</literal> in the <literal>from</literal>-clause and EPL can refer to event property names.
			</para>
			
			<para>
				Instead of <literal>PersonEvent</literal> being a Java class, it could also be an Apache Avro schema or an XML schema or a Map or array of names and properties. The different event representations are discussed at <xref linkend="eventrep_comparing"/>.
			</para>
			
			<para>
				Your application can instead pre-configure event types using the <literal>Configuration</literal> object, see <xref linkend="configuration-items"/>.
			</para>

			<para>
				Your application can, instead of calling an API, add event types using EPL with <literal>create schema</literal>, see <xref linkend="epl_createschema"/>.
			</para>
		</sect2>    

		<sect2 xml:id="gettingstarted_steps_4" revision="1">
			<title>Step Four: Create EPL Statements and Attach Callbacks</title>
			
			<para>
				The sample EPL for this getting-started section simply selects the name and the age of each arriving person event:
			</para>
			<programlisting>select name, age from PersonEvent</programlisting>

			<para>
				Your application can create an EPL statement using the <literal>createEPL</literal> method that is part of the administrative interface.
			</para>

			<para>
				The API calls are:
			</para>
			<programlisting>String epl = "select name, age from PersonEvent";
EPStatement statement = engine.getEPAdministrator().createEPL(epl);</programlisting>

			<para>
				Upon creating the statement, the engine verifies that <literal>PersonEvent</literal> exists since it is listed in the <literal>from</literal>-clause.
				The engine also verifies that the <literal>name</literal> and <literal>age</literal> properties are available for the <literal>PersonEvent</literal> since they are listed in the <literal>select</literal>-clause.
			</para>
			
			<para>
				After successful verification, the engine internally adds an entry to an internally-maintained filter index tree structure that ensures that when a <literal>PersonEvent</literal> comes in it will be processed by the statement.
			</para>

			<para>
				Your application can attach a callback to the <literal>EPStatement</literal> to receive statement results.
			</para>

			<para>
				The following callback simply prints name and age:
			</para>
			<programlisting>statement.addListener( (newData, oldData) -> {
  String name = (String) newData[0].get("name");
  int age = (int) newData[0].get("age");
  System.out.println("String.format(Name: %s, Age: %d", name, age));
});</programlisting>
  
			<para>
				More information about creating EPL statements is at <xref linkend="api-admin-creating"/> and <xref linkend="devlifecycle-admin"/> and the JavaDoc.
			</para>

			  <para>
				Your application can provide different kinds of callbacks, see <xref linkend="api-receive-results"/>.
			  </para>
		</sect2>    

		<sect2 xml:id="gettingstarted_steps_5" revision="1">
			<title>Step Five: Send Events</title>
			
			<para>
				Your application can send events into the engine using the <literal>sendEvent</literal> method that is part of the runtime interface:
			</para>
			<programlisting>engine.getEPRuntime().sendEvent(new PersonEvent("Peter", 10));</programlisting>

			<para>
				The output you should see is:
			</para>
			<programlisting>Name: Peter, Age: 10</programlisting>
			
			<para>
				Upon sending the <literal>PersonEvent</literal> event object to the engine, the engine consults the internally-maintainced shared filter index tree structure to determine if any EPL statement is interested in <literal>PersonEvent</literal> events.
				The EPL statement that was created as part of this example has <literal>PersonEvent</literal> in the <literal>from</literal>-clause, thus the engine delegates processing of such events to the statement.
				The EPL statement obtains the name and age properties by calling the <literal>getName</literal> and <literal>getAge</literal> methods.
			</para>
			
			<para>
				For different event representations and <literal>sendEvent</literal> methods please see <xref linkend="eventrep_comparing"/>.
			</para>
			
			<para>
				Specialized event senders are explained in <xref linkend="api-runtime-eventsender"/>.
			</para>
			
			<para>
				For reference, here is the complete code without event class:
			</para>
			<programlisting>EPServiceProvider engine = EPServiceProviderManager.getDefaultProvider();
engine.getEPAdministrator().getConfiguration().addEventType(PersonEvent.class);
String epl = "select name, age from PersonEvent";
EPStatement statement = engine.getEPAdministrator().createEPL(epl);
statement.addListener( (newData, oldData) -> {
  String name = (String) newData[0].get("name");
  int age = (int) newData[0].get("age");
  System.out.println(String.format("Name: %s, Age: %d", name, age));
});
engine.getEPRuntime().sendEvent(new PersonEvent("Peter", 10));
</programlisting>
		</sect2>    
    </sect1>    
    
	<sect1 xml:id="required_3rd_party" revision="1">
        <title>Required 3rd Party Libraries</title>
        
        <para>
            Esper requires the following 3rd-party libraries at runtime:
        </para>
        
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					ANTLR is the parser generator used for parsing and parse tree walking of the pattern and EPL syntax. Credit goes to Terence Parr at http://www.antlr.org. The ANTLR license is a BSD license and is provided in <literal>lib/esper_3rdparties.license</literal>. The <literal>antlr-runtime</literal> runtime library is required for runtime.
				</para>
			</listitem>
			<listitem>
				<para>
					CGLIB is the code generation library for fast method calls, licensed under Apache 2.0 license as provided in <literal>lib/esper_3rdparties.license</literal>.
				</para>
			</listitem>
			<listitem>
				<para>
					SLF4J is a logging API that can work together with LOG4J and other logging APIs. While SLF4J is required, the LOG4J log component is not required and can be replaced with other loggers. SLF4J is licensed under Apache 2.0 license as provided in <literal>lib/esper_3rdparties.license</literal>.
				</para>
			</listitem>
			<listitem>
				<para>
					Janino (optional) is a small and fast Java compiler. Esper, in the default configuration, generates code and compiles generated code using Janino. Janino is optional and does not need to be in classpath after your configuration disables code generation. Janino is licensed under 3-clause New BSD License as provided in <literal>lib/esper_3rdparties.license</literal>.
				</para>
			</listitem>
		</itemizedlist>

        <para>
            Esper requires the following 3rd-party libraries for running the test suite:
        </para>
        
		<itemizedlist spacing="compact">
			<listitem>
				<para>
					JUnit is a great unit testing framework. Its license has also been placed in the lib directory. The library is required for build-time only.
				</para>
			</listitem>
			<listitem>
				<para>
					MySQL connector library is used for testing SQL integration and is required for running the automated test suite.
				</para>
			</listitem>
		</itemizedlist>

    </sect1>

</chapter>

