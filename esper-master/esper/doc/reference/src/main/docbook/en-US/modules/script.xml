<chapter xml:id="script" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>Script Support</title>
        
    <sect1 xml:id="script-overview">
        <title>Overview</title>
		<indexterm><primary>script declaration</primary></indexterm>
		<indexterm><primary>JavaScript</primary></indexterm>
		<indexterm><primary>Python</primary></indexterm>
		<indexterm><primary>Ruby</primary></indexterm>
		<indexterm><primary>MVEL</primary></indexterm>
		<indexterm><primary>PHP</primary></indexterm>
		<indexterm><primary>PERL</primary></indexterm>
		
		<para>
			Esper allows the use scripting languages within EPL. You may use scripts for imperative programming to execute certain code as part of EPL processing by the engine.
		</para>

		<para>
		    The syntax and examples outlined below discuss how to declare a script that is visible to the same EPL statement that listed the script.
		</para>
		
		<para>
			For declaring scripts that are visible across multiple EPL statements i.e. globally visible scripts please consult <xref linkend="create-exprglobal-script"/> 
			that explains the <literal>create expression</literal> clause.
		</para>
		
		<para>
			Any scripting language that supports JSR 223 and also the MVEL scripting language can be specified in EPL. This section provides MVEL and JavaScript examples.
		</para>
					
		<para>
			For more information on the MVEL scripting language and its syntax, please refer to 
			the MVEL documentation. MVEL is an expression language that has a natural syntax for Java-based applications and compiles to provide fast execution times. To use MVEL with Esper, please make sure to add the MVEL jar file to the application classpath.
		</para>

		<para>
			For more information on JSR 223 scripting languages, please refer to external resources. As JSR 223 defines a standard API for script engines, your application may use any script engine that implements the API. Current JVM versions ship with a JavaScript script engine. Other script engines such as Groovy, Ruby and Python scripts can be used as implementations of JSR 223.
		</para>
		
		<para>
		  As an alternative to a script consider providing a custom single row function as described in <xref linkend="custom-singlerow-function"/>
		</para>
	</sect1>
			
	<sect1 xml:id="script-syntax">
		<title>Syntax</title>

		<para>
		The syntax for scripts is:
		</para>
		<synopsis>expression [<emphasis>return_type</emphasis>] [@type(<emphasis>eventtype_name</emphasis>)] [<emphasis>dialect_identifier</emphasis>:] script_name [ (<emphasis>parameters</emphasis>) ] [ script_body ]</synopsis>
		
		<para>
		  Use the <literal>expression</literal> keyword to declare a script.
		</para>
		
		<para>
			The <emphasis>return_type</emphasis> is optional. If the script declaration provides a return type the engine can perform strong type checking: Any expressions that invoke the script and use the return value are aware of the return type. If no return type is provided the engine assumes the script returns <literal>java.lang.Object</literal>.
		</para>
		
		<para>
			If the return type of the script is <literal>EventBean[]</literal> you must provide the <literal>@type(name)</literal> annotation after the return type to name the event type of events returned by the script. 
			The <literal>@type</literal> is allowed only when the return type is <literal>EventBean</literal> instances.
		</para>
	
		<para>
			The <emphasis>dialect_identifier</emphasis> is optional and identifies the scripting language. Use <literal>mvel</literal> for MVEL , <literal>js</literal> for JavaScript and <literal>python</literal> for Python and similar for other JSR 223 scripting languages.
			If no dialect identifier is specified, the default dialect that is configured applies, which is <literal>js</literal> unless your application changes the default configuration.
		</para>

		<para>
			It follows the script name. You may use the same script name multiple times and thus overload providing multiple signatures under the same script name. The combination of script name and number of parameters must be unique however.
		</para>
		
		<para>
		   If you have script parameters, specify the parameter names for the script as a comma-separated list of identifiers in parenthesis. It is not necessary to list parameter types.
		</para>
		
		<para>
		  The <emphasis>script body</emphasis> is the actual MVEL or JavaScript or other scripting language script and is placed in square brackets: <literal>[ ... script body ...]</literal>.
		</para>
	</sect1>

	<sect1 xml:id="script-examples">
		<title>Examples</title>

		<para>
			The next example shows an EPL statement that calls a JavaScript script which computes the Fibonacci total for a given number:
		</para>
		<programlisting><![CDATA[expression double js:fib(num) [
fib(num);
function fib(n) {
  if(n <= 1)
    return n;
  return fib(n-1) + fib(n-2);
}
]
select fib(intPrimitive) from SupportBean;
]]></programlisting>

		<para>
		  The <literal>expression</literal> keyword is followed by the return type (<literal>double</literal>), the dialect (<literal>js</literal>) and the script name (<literal>fib</literal>) that declares a single parameter (<literal>num</literal>).
		  The JavaScript code that computes the Fibonacci total is between square brackets <literal>[]</literal>.
		</para>
		
		<para>
			The following example shows an EPL statement that calls a MVEL script which outputs all the different colors that are listed in the <literal>colors</literal> property of each <literal>ColorEvent</literal>:
		</para>
		<programlisting><![CDATA[expression mvel:printColors(colors) [
String c = null;
for (c : colors) {
   System.out.println(c);
}
]
select printColors(colors) from ColorEvent;]]></programlisting>		

		<para>
			This example instead uses JavaScript to print colors and passes the event itself as a script parameter (this example is for Java 8 and Nashorn):
		</para>
		<programlisting><![CDATA[expression js:printColors(colorEvent) [
  print(java.util.Arrays.toString(colorEvent.getColors()));
]
select printColors(colorEvent) from ColorEvent as colorEvent]]></programlisting>		

		<para>
			The next example creates a globally-visible script that returns <literal>ItemEvent</literal> events, 
			assuming that the <literal>ItemEvent</literal> event type is an event type defined by <literal>create schema ItemEvent(id string)</literal>:
		</para>
		<programlisting><![CDATA[create expression EventBean[] @type(ItemEvent) js:myScriptReturnsEvents() [
myScriptReturnsEvents();
function myScriptReturnsEvents() {
  var EventBeanArray = Java.type(\"com.espertech.esper.client.EventBean[]\");
  var events = new EventBeanArray(1);
  events[0] = epl.getEventBeanService().adapterForMap(java.util.Collections.singletonMap(\"id\", \"id1\"), \"ItemEvent\");
  return events;
}

// sample EPL:
// select myScriptReturnsEvents().where(v => v.id in ('id1', 'id3')) from MyEvent]]]></programlisting>		

	</sect1>

	<sect1 xml:id="script-variablevisibility">
		<title>Built-In EPL Script Attributes</title>

		<para>
		  The engine provides a built-in script object under the variable name <literal>epl</literal> to all scripts. Your scripts may use this script object to share and retain state by setting and reading script attributes.
		  The engine maintains a separate script object per context partition or per statement if not declaring a context. Therefore script attributes are not shared between statements,
		  however multiple scripts executed by the same context partition receive the same script object.
		</para>

		<para>
		  The <literal>epl</literal> script object implements the interface <literal>com.espertech.esper.client.hook.EPLScriptContext</literal>.
		  Please see the JavaDoc for services provided by <literal>EPLScriptContext</literal>.
		</para>
		
		<para>
		  For script state management, the <literal>EPLScriptContext</literal> interface has two methods: The <literal>void setScriptAttribute(String attribute, Object value)</literal> method to set an attribute value and the <literal>Object getScriptAttribute(String attribute)</literal> method to read an attribute value.
		</para>
		
		<para>
		  The next example demonstrates the use of the <literal>epl</literal> script object. It outputs a flag value <literal>true</literal> when an RFID event matched because the location is <literal>A</literal>, 
		  and outputs a flag value <literal>false</literal> when an RFID event matched because the location is <literal>B</literal>. The example works the same for either MVEL or JavaScript dialects: You may simple replace the <literal>js</literal> dialect with <literal>mvel</literal>.
		</para>
		
		<programlisting><![CDATA[expression boolean js:setFlag(name, value, returnValue) [
  if (returnValue) epl.setScriptAttribute(name, value);
  returnValue;
]
expression js:getFlag(name) [
  epl.getScriptAttribute(name);
]
select getFlag('locA') as flag from RFIDEvent(zone = 'Z1' and
  (setFlag('locA', true, location = 'A') or setFlag('locA', false, location = 'B')) )]]></programlisting>

		<para>
		  The example above utilizes two scripts: The <literal>setFlag</literal>  script receives an attribute name, attribute value and a return value. The script sets the script attribute only when the return value is true. The  <literal>getFlag</literal> script simply returns the script attribute value.
		</para>
	</sect1>
		                
	<sect1 xml:id="script-performance">
		<title>Performance Notes</title>

		<para>
			Upon EPL statement compilation, the engine resolves script parameter types and performs script compilation. At runtime the engine evaluates the script in its compiled form.
		</para>
		
		<para>
		  As the engine cannot inspect scripts if is not possible for the engine to perform query planning or many optimizations based on the information in scripts. It is thus recommended to structure EPL such that basic filter and join expressions are
		  EPL expressions and not script expressions.
		</para>
		
	</sect1>

	<sect1 xml:id="script-other">
		<title>Additional Notes</title>
		
		<para>
		  Your EPL may declare a return type for the script. If no return type is declared and when using the MVEL dialect, the engine will infer the return type from the MVEL expression analysis result. If the return type is not provided and cannot be inferred or the dialect is not MVEL, the return type is <literal>Object</literal>.
		</para>
		
		<para>
		  If the EPL declares a numeric return type then engine performs coercion of the numeric result to the return type that is specified.
		</para>

		<para>
		  In the case that the EPL declares a return type that does not match the type of the actual script return value, the engine does not check return value type.
		</para>
	</sect1>	
</chapter>
