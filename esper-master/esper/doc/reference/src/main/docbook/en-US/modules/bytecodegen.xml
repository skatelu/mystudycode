<chapter xml:id="bytecodegen" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>Byte Code Generation</title>

    <sect1 xml:id="bytecodegen_intro" revision="1">
        <title>Introduction</title>
		<indexterm><primary>byte code generation</primary><secondary>overview</secondary></indexterm>

		<para>
			Esper generates byte code for EPL statements. Byte code generation is a technique that blends state-of-the-art from modern compilers and MPP databases. 
		</para>
		
		<para>
			Byte code generation can significantly speed up processing as it eliminates many virtual calls and especially megamorphic calls (a callsite with 3 or more possible implementations is megamorphic) as well as casts and branching.
			Byte code generation allows the runtime to optimize the generated code and allows the hardware to execute faster.
		</para>
		
		<tip>
			<para>
				The engine implements the best architecture for performance engineering in data processing by performing byte code generation.
				Not all workloads can benefit from byte code generation to the same degree. 
			</para>		
		</tip>
		
		<para>
			Byte code generation is enabled by default and can be disabled entirely. Please refer to <xref linkend="config-engine-bytecodegen"/> for configuration options.
		</para>

		<para>
			For example, consider the expression <literal>a + b</literal> (field <literal>a</literal> plus field <literal>b</literal>).
			Upon creating a statement the engine performs these steps:
		</para>
		<orderedlist>
			<ns:listitem>
				<para>
					Analyzes the expression and determines where fields <literal>a</literal> and <literal>b</literal> come from (for example event type or variable) and the field type (for example string or integer).
				</para>
			</ns:listitem>
			<ns:listitem>
				<para>
					Verifies that the addition arithmetic operation can indeed be applied to the two fields. It verifies that both fields are indeed numeric and can thus be added.
				</para>
			</ns:listitem>
		</orderedlist>
		
		<para>
			Without byte code generation, for example, in order to evaluate the expression <literal>a + b</literal> the VM makes 3 virtual calls: One to obtain the value of field <literal>a</literal>, one to obtain the value of field <literal>b</literal> and one to perform the <literal>+</literal> plus-operation.
		</para>
			 
		<para>
			With byte code generation the engine can reduce the number of virtual calls. In the best case the number of virtual calls to evaluate the <literal>a + b</literal> expression is one (for the invocation of the generated code itself).
		</para>
		
		<para>
			All byte code generation takes place at time of EPL statement creation (and not at runtime).
		</para>				 
	</sect1>

    <sect1 xml:id="bytecodegen_usage" revision="1">
        <title>Usage Notes</title>
		<indexterm><primary>byte code generation</primary><secondary>usage</secondary></indexterm>
                
		<sect2 xml:id="bytecodegen_criteria" revision="1">
			<title>Criteria</title>
			<para>
				In the default configuration, the engine generates code for: 
			</para>
			<itemizedlist>
				<ns:listitem>
					<para>
						The result-set-processing including the select-clause, aggregation processing and all expressions therein, including the group-by, having-clause and order-by clause processing.
					</para>
				</ns:listitem>
				<ns:listitem>
					<para>
						 All other interdependent expressions (expressions that depend on other expressions).
					</para>
				</ns:listitem>
			</itemizedlist>

			<para>
				The engine does not generate code for (not a comprehensive list):
			</para>
			<itemizedlist>
				<ns:listitem>
					<para>Constants and other expressions that can typically be evaluated with zero or very few virtual calls.</para>
				</ns:listitem>
				<ns:listitem>
					<para>Expressions that only perform a state lookup such as the <literal>prev</literal> or <literal>prior</literal> function.</para>
				</ns:listitem>
			</itemizedlist>			
		</sect2>

		<sect2 xml:id="bytecodegen_fallback" revision="1">
			<title>Fallback</title>
			<para>
				By default, in the case that byte code generation fails, the engine logs a WARN-level message and falls back to regular evaluation, all at time of EPL statement creation.
				Please report any stack traces as a Github issue and include the code that was produced by byte code generation as well as the EPL statement.
				The fallback can be disabled by configuration.
			</para>			
		</sect2>

		<sect2 xml:id="bytecodegen_logging" revision="1">
			<title>Logging</title>
			<para>
				You can log generated classes at INFO log level by setting the configuration flag for code logging as described in <xref linkend="config-engine-logging-code"/>.
			</para>
			<para>
				As an alternative you can configure your log provider configuration file by setting DEBUG level for class <literal>com.espertech.esper.codegen.compile.CodegenCompilerJanino</literal> (provider class may change between versions).
			</para>
		</sect2>

		<sect2 xml:id="bytecodegen_debugging" revision="1">
			<title>Debugging Generated Code</title>
			<para>
				The information herein is for developers and is specific to the Janino compiler at the version provided with the distribution.
			</para>
			<para>
				To have Janino generate classes into a given directory, define the system property <literal>org.codehaus.janino.source_debugging.dir</literal> to a file system directory.
				The IDE can debug into generated classes and show the source code provided that the IDE can access the source code.
			</para>
			<para>
				To include debug symbol information in the class binaries, or to include additional comments regarding the generating code itself in the generated source code, 
				you must change the configuration as outlined in <xref linkend="config-engine-bytecodegen"/>.
			</para>
		</sect2>
	</sect1>
</chapter>
