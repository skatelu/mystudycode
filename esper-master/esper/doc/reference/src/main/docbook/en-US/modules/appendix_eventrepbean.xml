<appendix xml:id="appendix_eventrepbean" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

   <title>Event Representation: Plain-Old Java Object Events</title>
	<indexterm><primary>event</primary><secondary>Java object</secondary></indexterm>

    <para>
		This section provides information for using Plain-Old or Bean Java Objects to represent events. 
    </para>

	<para>
			For NEsper .NET also see <xref linkend="appendix_dotnet_eventrep_javabean"/>.
	</para>

	<sect1 xml:id="appendix_eventrepbean_overview">
	   <title>Overview</title>
		<para>
			Plain-old Java object events are object instances that expose event properties through JavaBeans-style getter methods. Events classes or interfaces do not have to be fully compliant to the JavaBean specification; however for the Esper engine to obtain event properties, the required JavaBean getter methods must be present or an accessor-style and accessor-methods may be defined via configuration.
		</para>
	
		<para>
			Esper supports JavaBeans-style event classes that extend a superclass or implement one or more interfaces. 
			Also, Esper event pattern and EPL statements can refer to Java interface classes and abstract classes. 
		</para>
	
		<para>
			Classes that represent events should be made immutable. As events are recordings of a state change or action that occurred in the past, the relevant event properties should not be changeable. However this is not a hard requirement and the Esper engine accepts events that are mutable as well.
		</para>
	
		<para>
			The <literal>hashCode</literal> and <literal>equals</literal> methods do not need to be implemented. The implementation of these methods by a Java event class does not affect the behavior of the engine in any way.
		</para>
	
		<para>
			Please see <xref linkend="configuration"/> on options for naming event types represented by Java object event classes.
			Java classes that do not follow JavaBean conventions, such as legacy Java classes that expose public fields, or methods not following naming conventions, require additional configuration. Via configuration it is also possible to control case sensitivity in property name resolution. The relevant section in the chapter on configuration is <xref linkend="config-java-legacy"/>.
		</para>
		
		<note>
			<para>
				  Event classes must have <literal>public</literal> visibility.
			</para>
		</note>
	</sect1>

	<sect1 xml:id="appendix_eventrepbean_properties">
	   <title>Java Object Event Properties</title>
	   
		<para>
			As outlined earlier, the different property types are supported by the standard JavaBeans specification, and some of which are uniquely supported by Esper:
		</para>

		<itemizedlist spacing="compact">
			<listitem>
				<para>
					<emphasis>Simple</emphasis> properties have a single value that may be retrieved. The underlying property type might be a Java language primitive (such as int, a simple object (such as a java.lang.String), or a more complex object whose class is defined either by the Java language, by the application, or by a class library included with the application.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Indexed</emphasis> - An indexed property stores an ordered collection of objects (all of the same type) that can be individually accessed by an integer-valued, non-negative index (or subscript). 
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Mapped</emphasis> - As an extension to standard JavaBeans APIs, Esper considers any property that accepts a String-valued key a mapped property. 
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Nested</emphasis> - A nested property is a property that lives within another Java object which itself is a property of an event. 
				</para>
			</listitem>
		</itemizedlist>
		
		<para>
			Assume there is an <literal>NewEmployeeEvent</literal> event class as shown below. The mapped and indexed properties in this example return Java objects but could also return Java language primitive types (such as int or String). The <literal>Address</literal> object and <literal>Employee</literal> can themselves have properties that are nested within them, such as a street name in the <literal>Address</literal> object or a name of the employee in the <literal>Employee</literal> object.
		</para>
		
		<programlisting><![CDATA[public class NewEmployeeEvent {
	public String getFirstName();
	public Address getAddress(String type);
	public Employee getSubordinate(int index);
	public Employee[] getAllSubordinates();
}
]]></programlisting>

			<para>
				<emphasis>Simple</emphasis> event properties require a getter-method that returns the property value. In this example, the <literal>getFirstName</literal> getter method returns the <literal>firstName</literal> event property of type String.
			</para>
	
			<para>
				<emphasis>Indexed</emphasis> event properties require either one of the following getter-methods. A method that takes an integer-type key value and returns the property value, such as the <literal>getSubordinate</literal> method, or a method that returns an array-type, or a class that implements <literal>Iterable</literal>. An example is the <literal>getAllSubordinates</literal> getter method, which returns an array of Employee but could also return an <literal>Iterable</literal>. In an EPL or event pattern statement, indexed properties are accessed via the <literal>property[index]</literal> syntax.
			</para>
	
			<para>
				<emphasis>Mapped</emphasis> event properties require a getter-method that takes a String-typed key value and returns the property value, such as the <literal>getAddress</literal> method. In an EPL or event pattern statement, mapped properties are accessed via the <literal>property('key')</literal> syntax.
			</para>
	
			<para>
				<emphasis>Nested</emphasis> event properties require a getter-method that returns the nesting object. The <literal>getAddress</literal> and <literal>getSubordinate</literal> methods are mapped and indexed properties that return a nesting object. In an EPL or event pattern statement, nested properties are accessed via the <literal>property.nestedProperty</literal> syntax.
			</para>

			<para>
				All event pattern and EPL statements allow the use of indexed, mapped and nested properties (or a combination of these) anywhere where one or more event property names are expected. The below example shows different combinations of indexed, mapped and nested properties in filters of event pattern expressions (each line is a separate EPL statement):
			</para>

			<programlisting><![CDATA[every NewEmployeeEvent(firstName='myName')
every NewEmployeeEvent(address('home').streetName='Park Avenue')
every NewEmployeeEvent(subordinate[0].name='anotherName')
every NewEmployeeEvent(allSubordinates[1].name='thatName')
every NewEmployeeEvent(subordinate[0].address('home').streetName='Water Street')]]></programlisting>
	
			<para>
				Similarly, the syntax can be used in EPL statements in all places where an event property name is expected, such as in select lists, where-clauses or join criteria.
			</para>

			<programlisting><![CDATA[select firstName, address('work'), subordinate[0].name, subordinate[1].name
from NewEmployeeEvent(address('work').streetName = 'Park Ave')]]></programlisting>
		</sect1>

		<sect1 xml:id="appendix_eventrepbean_propertynames">
		   <title>Property Names</title>
			<para>
				Property names follows Java standards: the class <literal>java.beans.Introspector</literal> and method <literal>getBeanInfo</literal> returns the property names as derived from the name of getter methods. In addition, Esper configuration provides a flag to turn off case-sensitive property names. A sample list of getter methods and property names is: 
			</para>
	
			<table frame="topbot">
				<title>JavaBeans-Style Getter Methods and Property Names</title>
				<tgroup cols="3">
					<colspec colwidth="1*"/>
					<colspec colwidth="1*"/>
					<colspec colwidth="2*"/>
					<thead>
						<row>
							<entry>Method</entry>
							<entry>Property Name</entry>
							<entry>Example</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><literal>getPrice()</literal></entry>
							<entry>price</entry>
							<entry><synopsis>select price from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>getNAME()</literal></entry>
							<entry>NAME</entry>
							<entry><synopsis>select NAME from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>getItemDesc()</literal></entry>
							<entry>itemDesc</entry>
							<entry><synopsis>select itemDesc from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>getQ()</literal></entry>
							<entry>q</entry>
							<entry><synopsis>select q from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>getQN()</literal></entry>
							<entry>QN</entry>
							<entry><synopsis>select QN from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>getqn()</literal></entry>
							<entry>qn</entry>
							<entry><synopsis>select qn from MyEvent</synopsis></entry>
						</row>
						<row>
							<entry><literal>gets()</literal></entry>
							<entry>s</entry>
							<entry><synopsis>select s from MyEvent</synopsis></entry>
						</row>
					</tbody>
				</tgroup>
			</table>
	</sect1>
		
	<sect1 xml:id="appendix_eventrepbean_parameterized">
	   <title>Parameterized Types</title>

		<para>
			When your getter methods or accessor fields return a parameterized type, for example <literal>Iterable&lt;MyEventData&gt;</literal> for an indexed property or <literal>Map&lt;String, MyEventData&gt;</literal> for a mapped property, then property expressions may refer to the properties available through the class that is the type parameter.
		</para>

		<para>
			An example event that has properties that are parameterized types is:
		</para>

		<programlisting><![CDATA[public class NewEmployeeEvent {
public String getName();
public Iterable<EducationHistory> getEducation();
public Map<String, Address> getAddresses();
}]]></programlisting>
		
		<para>
			A sample of valid property expressions for this event is shown next:
		</para>
		<programlisting><![CDATA[select name, education, education[0].date, addresses('home').street
from NewEmployeeEvent]]></programlisting>
	</sect1>

	<sect1 xml:id="appendix_eventrepbean_indexedmappedsetter">
	   <title>Setter Methods for Indexed and Mapped Properties</title>
	   
		<para>
			An EPL statement may update indexed or mapped properties of an event, provided the event class exposes the required setter method. 
		</para>

		<para>
			The setter method for indexed properties must be named <literal>set</literal><emphasis>PropertyName</emphasis> and must take two parameters: the <literal>int</literal>-type index and the <literal>Object</literal> type new value.
		</para>

		<para>
			The setter method for mapped properties must be named <literal>set</literal><emphasis>PropertyName</emphasis> and must take two parameters: the <literal>String</literal>-type map key and the <literal>Object</literal> type new map value.
		</para>

		<para>
		  The following is an example event that features a setter method for the <literal>props</literal> mapped property and for the <literal>array</literal> indexed property:
		</para>
		<programlisting><![CDATA[public class MyEvent {
  private Map props = new HashMap();
  private Object[] array = new Object[10];

  public void setProps(String name, Object value) {
    props.put(name, value);
  }

  public void setArray(int index, Object value) {
    array[index] = value;
  }
  // ... also provide regular JavaBean getters and setters for all properties]]></programlisting>

		<para>
		  This sample statement updates mapped and indexed property values:
		</para>	
		<programlisting><![CDATA[update istream MyEventStream set props('key') = 'abc', array[2] = 100]]></programlisting>
	</sect1>

	<sect1 xml:id="appendix_eventrepbean_knownlimit">
	   <title>Known Limitations</title>

		<para>
			Esper employs byte code generation for fast access to event properties. When byte code generation is unsuccessful, the engine logs a warning and uses Java reflection to obtain property values instead.
		</para>

		<para>
			A known limitation is that when an interface has an attribute of a particular type and the actual event bean class returns a subclass of that attribute, the engine logs a warning and uses reflection for that property.
		</para>	
	</sect1>
</appendix>
