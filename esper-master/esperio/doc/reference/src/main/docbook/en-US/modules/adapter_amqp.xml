<chapter xml:id="adapter_amqp" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="./" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

    <title>The AMQP Input and Output Adapter</title>
    
    <para>
        This chapter discusses the input and output adapters for AMQP. 
        AMQP input and output utilizes data flow operators.
    </para>
    
    <sect1 xml:id="amqp-intro">
        <title>Introduction</title>

        <para>
			In order to use the AMQP data flow operators, add <literal>esperio-amqp-</literal><emphasis>version</emphasis><literal>.jar</literal> to your classpath and import the operator package or class using the static or runtime configuration.
		</para>

		<para>
			The following code snippet uses the runtime configuration API to import the AMQP adapter classes:
		</para>
		<programlisting><![CDATA[epService.getEPAdministrator().getConfiguration()
  .addImport(AMQPSource.class.getPackage().getName() + ".*");]]></programlisting>

        <para>
			The AMQP input and output adapter provides the following data flow operators:
		</para>

		<table frame="topbot" xml:id="adapter_amqp_operators" revision="2">
			<title>AMQP Operators</title>
			<tgroup cols="2">
				<colspec colwidth="1.0*"/>
				<colspec colwidth="2.0*"/>
				<thead>
					<row>
						<entry>Operator</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>AMQPSink</entry>
						<entry>
							<para>
								Send messages to an AMQP broker. See <xref linkend="amqp-sink"/>.
							</para>
						</entry>
					</row>
					<row>
						<entry>AMQPSource</entry>
						<entry>
							<para>
								Receive messages from an AMQP broker. See <xref linkend="amqp-source"/>.
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>				        
    </sect1>

    <sect1 xml:id="amqp-sink">
        <title>AMQPSink Operator</title>

		<para>
		  The AMQPSink operator receives input stream events, transforms events to AMQP messages and sends messages into an AMQP queue.
		</para>
		
		<para>
		  The AMQPSink operator must have a single input stream.
		</para>

		<para>
		  The AMQPSink operator cannot declare any output streams.
		</para>
		
		<para>
		  Parameters for the AMQPSink operator are:
		</para>

		<table frame="topbot" xml:id="amqpsink_params" revision="2">
			<title>AMQPSink Parameters</title>
			<tgroup cols="2">
				<colspec colwidth="0.35*"/>
				<colspec colwidth="0.65*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>host (required)</entry>
						<entry>Host name string</entry>
					</row>
					<row>
						<entry>queueName</entry>
						<entry>Queue name string</entry>
					</row>
					<row>
						<entry>collector (required)</entry>
						<entry>Transformation class or instance for events to AMQP message</entry>
					</row>
					<row>
						<entry>port</entry>
						<entry>Port number integer</entry>
					</row>
					<row>
						<entry>username</entry>
						<entry>User name string</entry>
					</row>
					<row>
						<entry>password</entry>
						<entry>Password string (also see systemProperties or data flow instantiation options)</entry>
					</row>
					<row>
						<entry>vhost</entry>
						<entry>Vhost string</entry>
					</row>
					<row>
						<entry>exchange</entry>
						<entry>Exchange name string</entry>
					</row>
					<row>
						<entry>routingKey</entry>
						<entry>Routing key string</entry>
					</row>
					<row>
						<entry>logMessage</entry>
						<entry>Boolean indicator whether to log a text for each message</entry>
					</row>
					<row>
						<entry>waitMSecNextMsg</entry>
						<entry>Number of milliseconds wait between messages, a long-typed value</entry>
					</row>
					<row>
						<entry>declareDurable</entry>
						<entry>Boolean indicator whether durable, false by default</entry>
					</row>
					<row>
						<entry>declareExclusive</entry>
						<entry>Boolean indicator whether exclusive, false by default</entry>
					</row>
					<row>
						<entry>declareAutoDelete</entry>
						<entry>Boolean indicator whether auto-delete, true by default</entry>
					</row>
					<row>
						<entry>declareAdditionalArgs</entry>
						<entry>Map of additional arguments passed to AMQP of type Map&lt;String, Object&gt;</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		
		<para>
		  Either the <literal>queueName</literal> or the combination of <literal>exchange</literal> and <literal>routingKey</literal> are required parameters.
		</para>
		
		<para>
		  The collector is required and must be specified to transform events to AMQP messages. The collector instance must implement the interface <literal>ObjectToAMQPCollector</literal>. The adapter provides a default implementation <literal>ObjectToAMQPCollectorSerializable</literal> that 
		  employs default serialization.
		</para>

		<para>
			The following example declares a data flow that is triggered by <literal>MyMapEventType</literal> events from the event bus (type not declared here) that sends serialized messages to an AMQP queue:
		</para>
		<programlisting><![CDATA[create dataflow AMQPOutgoingDataFlow
   EventBusSource -> outstream<MyMapEventType> {}
   AMQPSink(outstream) {
     host: 'localhost',
     queueName: 'myqueue',
     collector: {class: 'ObjectToAMQPCollectorSerializable'}
   }]]></programlisting>
   
	</sect1>

    <sect1 xml:id="amqp-source">
        <title>AMQPSource Operator</title>

		<para>
		  The AMQPSource operator receives AMQP messages from a queue, transforms messages and populates a data flow instance with events.
		</para>
		
		<para>
		  The AMQPSource operator cannot declare any input streams.
		</para>
		
		<para>
		  The AMQPSource operator must have a single output stream.
		</para>

		<para>
		  Parameters for the AMQPSource operator are listed below, with the required parameters listed first:
		</para>
		
		<table frame="topbot" xml:id="amqpsource_params" revision="2">
			<title>AMQPSource Parameters</title>
			<tgroup cols="2">
				<colspec colwidth="0.35*"/>
				<colspec colwidth="0.65*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>host (required)</entry>
						<entry>Host name string</entry>
					</row>
					<row>
						<entry>queueName (required)</entry>
						<entry>Queue name string</entry>
					</row>
					<row>
						<entry>collector (required)</entry>
						<entry>Transformation class or instance for AMQP message to underlying event transformation</entry>
					</row>
					<row>
						<entry>port</entry>
						<entry>Port number integer</entry>
					</row>
					<row>
						<entry>username</entry>
						<entry>User name string</entry>
					</row>
					<row>
						<entry>password</entry>
						<entry>Password string (also see systemProperties or data flow instantiation options)</entry>
					</row>
					<row>
						<entry>vhost</entry>
						<entry>Vhost string</entry>
					</row>
					<row>
						<entry>exchange</entry>
						<entry>Exchange name string</entry>
					</row>
					<row>
						<entry>routingKey</entry>
						<entry>Routing key string</entry>
					</row>
					<row>
						<entry>logMessage</entry>
						<entry>Boolean indiator whether to log a text for each message</entry>
					</row>
					<row>
						<entry>waitMSecNextMsg</entry>
						<entry>Number of milliseconds wait between messages, a long-typed value</entry>
					</row>
					<row>
						<entry>declareDurable</entry>
						<entry>Boolean indicator whether durable, false by default</entry>
					</row>
					<row>
						<entry>declareExclusive</entry>
						<entry>Boolean indicator whether exclusive, false by default</entry>
					</row>
					<row>
						<entry>declareAutoDelete</entry>
						<entry>Boolean indicator whether auto-delete, true by default</entry>
					</row>
					<row>
						<entry>declareAdditionalArgs</entry>
						<entry>Map of additional arguments passed to AMQP of type Map&lt;String, Object&gt;</entry>
					</row>
					<row>
						<entry>prefetchCount</entry>
						<entry>Prefetch count integer, defaults to 100</entry>
					</row>
					<row>
						<entry>consumeAutoAck</entry>
						<entry>Boolean indicator whether to auto-ack, true by default</entry>
					</row>
				</tbody>
			</tgroup>
		</table>		
		
		<para>
		  The collector is required and must be specified to transform AMQP messages to events. The collector instance must implement the interface <literal>AMQPToObjectCollector</literal>. The adapter provides a default implementation <literal>AMQPToObjectCollectorSerializable</literal> that 
		  employs default serialization.
		</para>

		<para>
			The following example declares a data flow that is receives AMQP messages from a queue, transforms each message and sends each message of type <literal>MyMapEventType</literal> into the event bus:
		</para>
		<programlisting><![CDATA[create dataflow AMQPIncomingDataFlow
  AMQPSource -> outstream<MyMapEventType> {
    host: 'localhost',
    queueName: 'myqueue',
    collector: {class: 'AMQPToObjectCollectorSerializable'},
    logMessages: true
  }
  EventBusSink(outstream){}]]></programlisting>			
	</sect1>
</chapter>